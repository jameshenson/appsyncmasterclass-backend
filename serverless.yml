# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: sixpillarsconsulting
service: appsyncmasterclass-backend

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

package:
  exclude:
    - package.json
    - package-lock.json

custom:
  stage: ${opt:stage, 'dev'}
  appSync: ${file(serverless.appsync-api.yml)}

plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function
  - serverless-export-env
functions:
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE:
        Ref: UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          Fn::GetAtt:
            - UsersTable
            - Arn

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: users-table

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: name
            Required: false
            Mutable: true
        LambdaConfig:
          PostConfirmation:
            Fn::GetAtt:
              - ConfirmUserSignupLambdaFunction
              - Arn

    UserPoolInvokeConfirmUserSignupLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName:
          Ref: ConfirmUserSignupLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn:
          Fn::GetAtt:
            - CognitoUserPool
            - Arn

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId:
          Ref: CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

  Outputs:
    CognitoUserPoolId:
      Value:
        Ref: CognitoUserPool
